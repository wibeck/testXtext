/*
 * generated by Xtext 2.17.1
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.MyDslStandaloneSetup
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import java.io.IOException

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	EcoreUtil2.resolveAll(resource);
	val newmod = resource.getContents().get(0);
	val uri1 =URI.createPlatformResourceURI(resource.getURI().trimSegments(1).path().substring(10) + "/instances.xmi", true);
	val xmiResource2 =new XMIResourceFactoryImpl().createResource(uri1);
	xmiResource2.getContents().add(newmod);
	
	try {
		xmiResource2.save(null);
	} catch (IOException e) {
		
		e.printStackTrace();
	}
		
	//fsa.generateFile('greetings.txt', 'People to greet: ' + 
	//	resource.allContents
	//		.filter(Greeting)				
	//		.map[name]
	//			.join(', '))
	}
}
