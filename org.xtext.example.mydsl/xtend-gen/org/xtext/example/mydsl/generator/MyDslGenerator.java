/**
 * generated by Xtext 2.17.1
 */
package org.xtext.example.mydsl.generator;

import java.io.IOException;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EcoreUtil2.resolveAll(resource);
    final EObject newmod = resource.getContents().get(0);
    String _substring = resource.getURI().trimSegments(1).path().substring(10);
    String _plus = (_substring + "/instances.xmi");
    final URI uri1 = URI.createPlatformResourceURI(_plus, true);
    final Resource xmiResource2 = new XMIResourceFactoryImpl().createResource(uri1);
    xmiResource2.getContents().add(newmod);
    try {
      xmiResource2.save(null);
    } catch (final Throwable _t) {
      if (_t instanceof IOException) {
        final IOException e = (IOException)_t;
        e.printStackTrace();
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
}
